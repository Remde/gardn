{"ast":null,"code":"var _jsxFileName = \"/Users/brunomoraes/Desktop/gardn/client/src/Components/chat.js\";\nimport React from \"react\";\nimport Navbar from \"../Components/navbar\";\nimport MainScreen from \"../Components/mainscreen\";\nimport TextInput from \"../Components/textinput\";\nimport socketIOClient from \"socket.io-client\";\n\nclass Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messageList: [],\n      messageKey: 0,\n      userList: []\n    };\n\n    this.componentDidMount = () => {\n      const socket = socketIOClient(\"http://161.35.136.196:5000/\");\n      socket.on(\"connect\", () => {\n        socket.emit(\"user update\", this.props.name);\n      }); //this.userListUpdate();\n\n      this.userListReceive();\n      this.messageReceive();\n    };\n\n    this.getTime = () => {\n      console.log(this.state.userList);\n      var myDate = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n      return myDate.slice(0, 5);\n    };\n\n    this.userListUpdate = () => {};\n\n    this.userListReceive = () => {\n      socket.on(\"user update\", userList => {\n        this.setState({\n          userList: userList\n        });\n      });\n    };\n\n    this.messageReceive = () => {\n      socket.on(\"chat message\", message => {\n        this.addMessage(message);\n      });\n    };\n\n    this.messageSend = message => {\n      let newMessageKey;\n      message = {\n        message: message,\n        author: this.props.username,\n        date: this.getTime(),\n        id: socket.id,\n        key: this.state.messageKey\n      };\n      newMessageKey = 1 + this.state.messageKey;\n      this.setState({\n        messageKey: newMessageKey\n      });\n      this.addMessage(message);\n      socket.emit(\"chat message\", message);\n    };\n\n    this.onButtonClick = event => {\n      this.props.unauthenticator();\n    };\n\n    this.addMessage = message => {\n      let newEntry = message;\n      let newState = this.state.messageList;\n      newState.push(newEntry);\n      this.setState(state => ({\n        messageList: newState\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      unauthenticator: this.props.unauthenticator,\n      username: this.props.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MainScreen, {\n      messageList: this.state.messageList,\n      id: socket.id,\n      key: this.state.messageKey,\n      userList: this.state.userList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      messageSend: this.messageSend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/brunomoraes/Desktop/gardn/client/src/Components/chat.js"],"names":["React","Navbar","MainScreen","TextInput","socketIOClient","Chat","Component","state","messageList","messageKey","userList","componentDidMount","socket","on","emit","props","name","userListReceive","messageReceive","getTime","console","log","myDate","Date","toTimeString","replace","slice","userListUpdate","setState","message","addMessage","messageSend","newMessageKey","author","username","date","id","key","onButtonClick","event","unauthenticator","newEntry","newState","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Navbar from \"../Components/navbar\";\nimport MainScreen from \"../Components/mainscreen\";\nimport TextInput from \"../Components/textinput\";\nimport socketIOClient from \"socket.io-client\";\n\n\n\nclass Chat extends React.Component {\n  state = { messageList: [], messageKey: 0, userList: [] };\n\n  componentDidMount = () => {\n    const socket = socketIOClient(\"http://161.35.136.196:5000/\");\n\n    socket.on(\"connect\", () => {\n      socket.emit(\"user update\", this.props.name);\n    });\n    //this.userListUpdate();\n    this.userListReceive();\n    this.messageReceive();\n  };\n\n  getTime = () => {\n    console.log(this.state.userList);\n    var myDate = new Date()\n      .toTimeString()\n      .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    return myDate.slice(0, 5);\n  };\n\n  userListUpdate = () => {\n\n  };\n\n  userListReceive = () => {\n    socket.on(\"user update\", (userList) => {\n      this.setState({ userList: userList });\n    });\n  };\n\n  messageReceive = () => {\n    socket.on(\"chat message\", (message) => {\n      this.addMessage(message);\n    });\n  };\n\n  messageSend = (message) => {\n    let newMessageKey;\n    message = {\n      message: message,\n      author: this.props.username,\n      date: this.getTime(),\n      id: socket.id,\n      key: this.state.messageKey,\n    };\n    newMessageKey = 1 + this.state.messageKey;\n    this.setState({ messageKey: newMessageKey });\n    this.addMessage(message);\n    socket.emit(\"chat message\", message);\n  };\n\n  onButtonClick = (event) => {\n    this.props.unauthenticator();\n  };\n\n  addMessage = (message) => {\n    let newEntry = message;\n    let newState = this.state.messageList;\n    newState.push(newEntry);\n    this.setState((state) => ({\n      messageList: newState,\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <Navbar\n          unauthenticator={this.props.unauthenticator}\n          username={this.props.username}\n        />\n        <MainScreen\n          messageList={this.state.messageList}\n          id={socket.id}\n          key={this.state.messageKey}\n          userList={this.state.userList}\n        />\n        <TextInput messageSend={this.messageSend} />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}