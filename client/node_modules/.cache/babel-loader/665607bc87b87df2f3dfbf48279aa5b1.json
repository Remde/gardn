{"ast":null,"code":"var _jsxFileName = \"/Users/brunomoraes/Desktop/gardn/client/src/Components/chat.js\";\nimport React from \"react\";\nimport Navbar from \"../Components/navbar\";\nimport MainScreen from \"../Components/mainscreen\";\nimport TextInput from \"../Components/textinput\";\nimport socketIOClient from \"socket.io-client\"; //const socket = socketIOClient(\"http://161.35.136.196:5000/\");\n\nconst socket = socketIOClient(\"http://localhost:5000/\");\n\nclass Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messageList: [],\n      messageKey: 0,\n      userList: []\n    };\n\n    this.componentDidMount = () => {\n      this.userListReceive();\n      this.messageReceive();\n      socket.emit(\"user update\", this.props.username);\n    };\n\n    this.getTime = () => {\n      console.log(this.state.userList);\n      var myDate = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n      return myDate.slice(0, 5);\n    };\n\n    this.userListReceive = () => {\n      socket.on(\"user update\", userList => {\n        this.setState({\n          userList: userList\n        });\n      });\n    };\n\n    this.messageReceive = () => {\n      socket.on(\"chat message\", message => {\n        this.addMessage(message);\n      });\n    };\n\n    this.messageSend = message => {\n      let newMessageKey;\n      message = {\n        message: message,\n        author: this.props.username,\n        date: this.getTime(),\n        id: socket.id,\n        key: this.state.messageKey\n      };\n      newMessageKey = 1 + this.state.messageKey;\n      this.setState({\n        messageKey: newMessageKey\n      });\n      this.addMessage(message);\n      socket.emit(\"chat message\", message);\n    };\n\n    this.onButtonClick = event => {\n      this.props.unauthenticator();\n    };\n\n    this.addMessage = message => {\n      let newEntry = message;\n      let newState = this.state.messageList;\n      newState.push(newEntry);\n      this.setState(state => ({\n        messageList: newState\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      unauthenticator: this.props.unauthenticator,\n      username: this.props.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MainScreen, {\n      messageList: this.state.messageList,\n      id: socket.id,\n      key: this.state.messageKey,\n      userList: this.state.userList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      messageSend: this.messageSend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/brunomoraes/Desktop/gardn/client/src/Components/chat.js"],"names":["React","Navbar","MainScreen","TextInput","socketIOClient","socket","Chat","Component","state","messageList","messageKey","userList","componentDidMount","userListReceive","messageReceive","emit","props","username","getTime","console","log","myDate","Date","toTimeString","replace","slice","on","setState","message","addMessage","messageSend","newMessageKey","author","date","id","key","onButtonClick","event","unauthenticator","newEntry","newState","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Navbar from \"../Components/navbar\";\nimport MainScreen from \"../Components/mainscreen\";\nimport TextInput from \"../Components/textinput\";\nimport socketIOClient from \"socket.io-client\";\n\n//const socket = socketIOClient(\"http://161.35.136.196:5000/\");\nconst socket = socketIOClient(\"http://localhost:5000/\");\n\nclass Chat extends React.Component {\n  state = { messageList: [], messageKey: 0, userList: [] };\n\n  componentDidMount = () => {\n    this.userListReceive();\n    this.messageReceive();\n    socket.emit(\"user update\", this.props.username);\n  };\n\n  getTime = () => {\n    console.log(this.state.userList);\n    var myDate = new Date()\n      .toTimeString()\n      .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n    return myDate.slice(0, 5);\n  };\n\n  userListReceive = () => {\n    socket.on(\"user update\", (userList) => {\n      this.setState({ userList: userList });\n    });\n  };\n\n  messageReceive = () => {\n    socket.on(\"chat message\", (message) => {\n      this.addMessage(message);\n    });\n  };\n\n  messageSend = (message) => {\n    let newMessageKey;\n    message = {\n      message: message,\n      author: this.props.username,\n      date: this.getTime(),\n      id: socket.id,\n      key: this.state.messageKey,\n    };\n    newMessageKey = 1 + this.state.messageKey;\n    this.setState({ messageKey: newMessageKey });\n    this.addMessage(message);\n    socket.emit(\"chat message\", message);\n  };\n\n  onButtonClick = (event) => {\n    this.props.unauthenticator();\n  };\n\n  addMessage = (message) => {\n    let newEntry = message;\n    let newState = this.state.messageList;\n    newState.push(newEntry);\n    this.setState((state) => ({\n      messageList: newState,\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <Navbar\n          unauthenticator={this.props.unauthenticator}\n          username={this.props.username}\n        />\n        <MainScreen\n          messageList={this.state.messageList}\n          id={socket.id}\n          key={this.state.messageKey}\n          userList={this.state.userList}\n        />\n        <TextInput messageSend={this.messageSend} />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}